Github:

Version control tools: Git, SVN...
Git: distributed
SVN: central server

Github 3 states:
Committed: safely stored in local database
Modified: changed but not committed to database yet
Staged: marked a modified file in current version
Untracted: initial stage

1.
//将github服务器上的名为Notes的repo拷贝到本地
git clone https://github.com/jingyangzhang/Notes.git
2.
//cd
cd Notes
3. 
//显示URL
git remote -v
操作之后显示origin URL (fetch)
            origin URL (push)
4. 
//配置(服务器/本地??)的profile
git config --global user.name/email ......
5. 
//创建
touch readme.txt
6.
//staged
git add readme.txt
7.
//commit
git commit -m "add readme.txt"
8.
//
git push origin master

git push -u: 对应

git init

git add .

版本管理:
Checkout and Reset:
1. git checkout -- <file>  把modified file的内容恢复到修改之前的版本
2. git reset HEAD <file> 把暂存区的某个文件回退到modified状态
3. git reset --soft HEAD~1 回退最后一个commit的内容并保留内容的变化. 如果不想保留内容 使用 git reset --hard HEAD~1

---------------------------------algorithm practice------------------------------------------------------

1. Unique Path (Simple)

A robot is located at the top-left corner of a m x n grid(where m > 0 and n > 0).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid.

How many possible unique paths are there?

1.naive method n^2, n^2
public class Solution {
  public int uniquePaths(int m, int n) {
    if (m * n == 0) {
    	return 0;
    }
    int[][] M = new int[m][n];
    for (int i = 0; i < m; i++) {
    	for (int j = 0; j < n; j++) {
      	if (i * j == 0) {
        	M[i][j] = 1;
        } else {
        	M[i][j] = M[i - 1][j] + M[i][j  -1];
        }
      }
    }
    return M[m -1][n - 1];
  }
}

2. Minimum Path Sum, n^2, 1(changes the original data)
public class Solution {
  public int miniSum(int[][] grid) {
    if (grid == null || grid.length * grid[0].length == 0) {
    	return 0;
    }
    for (int i = 0; i < grid.length; i++) {
    	for (int j = 0; j <grid[0].length; j++) {
        if (i == 0 && j != 0) {
        	grid[i][j] = grid[i][j - 1] + grid[i][j];
        }else if (i != 0 && j == 0) {
        	grid[i][j] += grid[i - 1][j];
        }else if (i * j != 0) {
        	grid[i][j] += Math.min(grid[i - 1][j], grid[i][j - 1]);
        }
      }
    }
    return grid[grid.length - 1][grid[0].length - 1];
  }
}

3.Possible Paths with Obstacles, O(n^2), O(n^2)
public class Solution {
  public int possiblepath(int[][] matrix) {
    //corner case
    if (matrix == null || matrix.length * matrix[0].length == 0) {
    	return 0;
    }
    int[][] M = new int[matrix.length][matrix[0].length];
    for (int i = 0; i < matrix.length; i++) {
    	for (int j = 0; j < matrix[0].length; j++) {
      	  if (matrix[i][j] != 1) {
            if (i == 0 && j== 0) {
          	M[i][j] = 1;
          } else if (i == 0 && j != 0) {
          	M[i][j] = M[i][j - 1] == 0 ? 0 : 1;
          } else if (i != 0 && j == 0) {
          	M[i][j] = M[i - 1][j] == 0 ? 0 : 1;
          } else {
          	M[i][j] = M[i - 1][j] + M[i][j - 1];
          }
        } 
      }
    }
    return  M[M.length - 1][M[0].length - 1];
  }
}












