class Solution {
    public boolean exist(char[][] board, String word) {
        if (board == null || word == null || board.length == 0 || board[0].length == 0 || word.length() == 0) {
    	    return false;
        }
        boolean[] res = {false};
        boolean[][] visited = new boolean[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
    	    for (int j = 0; j < board[0].length; j++) {                
                helper(board, i, j, word, res, 0, visited);
                if (res[0]) return true;
            }
        }
        return false;
    }
    private void helper(char[][] board, int i, int j, String word, boolean[] res, int index, boolean[][] visited) {
  	    //base case
        if (index == word.length() - 1) {
    	    if (word.charAt(index) == board[i][j]) {
                res[0] = true;
            }
            return;
        }
        if (word.charAt(index) != board[i][j]) {      
    	    return;
        }else {            
    	    if (!res[0] && i + 1 < board.length && !visited[i + 1][j]) {
                visited[i][j] = true;
                helper(board, i + 1, j, word, res, index + 1, visited);
                visited[i][j] = false;
            }
            if (!res[0] && i > 0 && !visited[i - 1][j]) {
                visited[i][j] = true;
      	        helper(board, i - 1, j, word, res, index + 1, visited);
                visited[i][j] = false;
            }
            if (!res[0] && j > 0 && !visited[i][j - 1]) {
                visited[i][j] = true;
      	        helper(board, i, j - 1, word, res, index + 1, visited);
                visited[i][j] = false;
            }
            if (!res[0] && j + 1 < board[0].length && !visited[i][j + 1]) {
                visited[i][j] = true;
      	        helper(board, i, j + 1, word, res, index + 1, visited);
                visited[i][j] = false;
            }
        }
    }    
}
