1. Spiral Order Generate I
public class Solution {
  public int[][] spiralGenerate(int n) {
    //corner case
    if (n == 0) {
    	return new int[0][0];
    }
    int up = 0; int left = 0;
    int down = n - 1; int right = n - 1;
    int count = 1;
    int[][] sol = new int[n][n];
    while (up < down && left < right) {
    	for (int i = left; i < right; i++) {
      	sol[up][i] = count++;
      }
      for (int i = up; i < down; i++) {
      	sol[i][right] = count++;
      }
      for (int i = right; i > left; i--) {
      	sol[down][i] = count++;
      }
      for (int i = down; i > up; i--) {
      	sol[i][left] = count++;
      }
      left++; right--;
      up++; down--;
    }
    if (n % 2 == 1) sol[n / 2][n / 2] = n * n;
    return sol;
  }
}
//O(n ^ 2), O(1)

2.Course Schedule II
public class Solution {
  public int[] findOrder(int n, int[][] pre) {
    //corner case
    if (n == 0 || pre == null || pre.length == 0 || pre[0].length == 0) {
    	return new int[0];
    }
  	int[] sol = new int[n];
    int[] inDegree = new int[n];
    for (int[] pairs : pre) {
    	inDegree[pairs[0]]++;
    }
    int count = 0;
    Queue<Integer> q = new LinkedList<>();
    for (int i = 0; i < n; i++) {
    	if (inDegree[i] == 0) {
      	q.offer(i);
        sol[count++] = i;
      }
    }
    while (!q.isEmpty()) {
    	int courseCode = q.poll();
      for (int[] pairs : pre) {
      	if (pairs[1] == courseCode) {
        	inDegree[pairs[0]]--;
          if (inDegree[pairs[0]] == 0) {
          	sol[count++] = pairs[0];
            q.offer(pairs[0]);
          }
        }
      }
    }
    return count == n ? sol : new int[0];
  }
}

3.Celebrity Problem
public class Solution {
  public int celebrity(int[][] matrix) {
    int[] social = new int[matrix.length];
    int[] fame = new int[matrix.length];
    for (int i = 0; i < matrix.length; i++) {
    	for (int j = 0; j < matrix.length; j++) {
        if (i != j) {
        	social[i] += matrix[i][j];
        	fame[j] += matrix[i][j];
        }      	
      }
    }
    for (int k = 0; k < fame.length; k++) {
    	if (fame[k] == matrix.length - 1 && social[k] == 0) {
      	return k;
      }
    }
    return -1;
  }
}
//O(n^2), O(n)

4.Minimum Depth of Binary Tree
public class Solution {
  public int minDepth(TreeNode root) {
    if (root == null) {
    	return 0;
    }
    Queue<TreeNode> q = new LinkedList<>();
    q.offer(root);
    int index = 1;
    while (!q.isEmpty()) {
    	int size = q.size();
      for (int i = 0; i < size; i++) {
      	TreeNode curNode = q.poll();
        if (curNode.left == null && curNode.right == null) {
        	return index;
        }
        if (curNode.left != null) q.offer(curNode.left);
        if (curNode.right != null) q.offer(curNode.right);        
      }
      index++;      
    }
    return index;
  }
}
//O(n), O(n)