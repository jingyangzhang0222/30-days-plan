1. Count Primes
public class Solution {
  public int countPrimes(int n) {
    // Sieve of Eeatosthese
    //corner  case
    if (n < 2) {
    	return 0;
    }
    int count = 0;
    boolean[] notPrime = new boolean[n];
    for (int i = 2; i < n; i++) {
    	if (!notPrime[i]) {
      	count++;
        for (int j = 2; i * j < n; j++) {
        	notPrime[i * j] = true;
        }
      }
    }
    return count;
  }
}

2. Prime Factors
public class Solution {
  public List<Integer> factors(int target) {
    List<Integer> sol = new ArrayList<>();
    int curFactor = 2;
    while (target > 1) {
    	if (target % curFactor == 0) {
      	sol.add(curFactor);
        target /= curFactor;
        continue;
      }
      curFactor++;
    }
    return sol;
  }
}
//O(n), O(1)

3. Search in Sorted Matrix
/*
				1 2 3
				2 4 5
        6 8 10
*/
public class Solution {
  public int[] search(int[][] matrix, int target) {
    //corner case
    int[] sol = {-1, -1};
    if (matrix.length == 0 || matrix[0].length == 0) {
      return sol;
    }
    int x = matrix.length - 1;
    int y = 0;
    while (x >= 0 && y < matrix[0].length) {
    	if (matrix[x][y] == target) {
      	sol[0] = x;
        sol[1] = y;
        return sol;
      }
      if (matrix[x][y] > target) {
      	x--;
      } else {
      	y++;
      }
    }
    return sol;
  }
}
O(m + n), O(1)

4. LevelOrder Reconstrruct Complete Binary Tree
public class Solution {
  public TreeNode construct(int[] level) {
    if (level.length == 0) return null;
    int index = 0;
    TreeNode root = new TreeNode(level[index]);
    Queue<TreeNode> q = new LinkedList<>();
    q.offer(root);
    while (!q.isEmpty()) {
    	int size = q.size();
      for (int i = 0; i < size; i++) {
      	TreeNode curNode = q.poll();
        if (2 * index + 1< level.length) {
        	curNode.left = new TreeNode(level[2 * index + 1]);
          q.offer(curNode.left);
        }
        if (2 * index + 2 < level.length) {
        	curNode.right = new TreeNode(level[2 * index + 2]);
          q.offer(curNode.right);
        }
        index++;
      }
    }
    return root;
  }
}
//O(n), O(n)

5. Nth Largest Value
public class Solution {
  public int getThirdLargest(int[] array) {
    PriorityQueue<Integer> pq = new PriorityQueue<>();
    pq.offer(array[0]);
    pq.offer(array[1]);
    pq.offer(array[2]);
    for (int i = 3; i < 10; i++) {
    	if (array[i] > pq.peek()) {
        pq.poll();
      	pq.offer(array[i]);
      }
    }
    return pq.peek();
  }
}

6. Merge Intervals
/**
 * class Interval {
 *   public int start;
 *   public int end;
 *   public Interval(int start, int end) {
 *     this.start = start;
 *     this.end = end;
 *   }
 * }
 */
class Solution {
  public int length(List<Interval> intervals) {
    if (intervals.size() == 0) {
    	return 0;
    }
    Collections.sort(intervals, new myComparator());
    int totalLen = 0;
    int start = intervals.get(0).start;
    int end = intervals.get(0).end;
    for (Interval i : intervals) {
    	if (i.start <= end) {// we can merge here
      	end = Math.max(end, i.end);
      } else {
      	totalLen += end - start;
        start = i.start;
        end = i.end;
      }
    }
    totalLen += end - start;
    return totalLen;
  }
  static class myComparator implements Comparator<Interval>{
  	@Override
    public int compare(Interval i1, Interval i2) {
    	if (i1.start == i2.start) {
      	return 0;
      }
      return i1.start < i2.start ? -1 : 1;
    }
  }
}
//O(nlogn), O(Collections.sort??)