1. Binary Tree Longest Consecutive Sequence path
public class Solution {
  public int longestConsecutive(TreeNode root) {
    //corner case
    if (root == null) {
    	return 0;
    }
    int[] globalMax = {1};
    helper(root, globalMax, root.key, 1);
    return globalMax[0];
  }
  private void helper(TreeNode root, int[] globalMax, int preVal, int preLen) {
  	//base case
    if (root == null) {
    	return;
    }
    if (root.key == preVal + 1) {
      globalMax[0] = Math.max(globalMax[0], preLen + 1);
    	helper(root.left, globalMax, root.key, preLen + 1);
      helper(root.right, globalMax, root.key, preLen + 1);
    } else {
    	helper(root.left, globalMax, root.key, 1);
      helper(root.right, globalMax, root.key, 1);
    }
  }
}
O(v), O(h)

2. Count Univalue Subtrees
public class Solution {
  public int countUnivalSubtrees(TreeNode root) {
    //corner case
    if (root == null) {
    	return 0;
    }
    int[] count = {0};
    helper(root, count);
    return count[0];
  }
  private boolean helper(TreeNode root, int[] count) {
  	//base case
    if (root == null)	return true;    
    boolean left = helper(root.left, count);
    boolean right = helper(root.right, count);    
    boolean leftValid = root.left == null || root.left.key == root.key;
    boolean rightValid = root.right == null || root.right.key == root.key;  	
    count[0] += left && right && leftValid && rightValid ? 1 : 0;
    return left && right && leftValid && rightValid;
  }
}
O(v), O(h)

3. Paint House
public class Solution {
  public int minCost(int[][] costs) {
    if (costs == null || costs.length == 0 || costs[0].length == 0) {
    	return 0;
    }
    int[] globalMin = {Integer.MAX_VALUE};
    helper(costs, globalMin, 0, 0, -1);
    return globalMin[0];
  }
  private void helper(int[][] costs, int[] globalMin, int index, int sum, int preColor) {
  	//base case
    if (index == costs.length) {
    	globalMin[0] = Math.min(globalMin[0], sum);
      return;
    }
    for (int i = 0; i < 3; i++) {
    	if (i == preColor) continue;
      helper(costs, globalMin, index + 1, sum + costs[index][i], i);
    }
  }
}
O(2^n), O(n)

4. Palindrome Permutation
public class Solution {
  public boolean canPermutePalindrome(String s) {
    if (s == null || s.length() == 0) {
    	return false;
    }
    Map<Character, Integer> count = new HashMap<>();
    int oddCount = 0;
    for (int i = 0; i < s.length(); i++) {
    	if (!count.containsKey(s.charAt(i))) {
      	count.put(s.charAt(i), 1);
        oddCount++;
      } else {
      	int fre = count.get(s.charAt(i));
        oddCount += (fre % 2 == 0) ? 1 : -1;
        count.put(s.charAt(i), fre + 1);
      }
    }
    return oddCount < 2;
  }
}
O(n), O(1)

5. Paint Fence

6. cousin in bt
public boolean isCousin(TreeNode root, int a, int b) {
    //corner case
    if (root == null) {
    	return false;
    }
    int count = 0;
    Queue<TreeNode> q = new LinkedList<>();
    q.offer(root);
    while (!q.isEmpty()) {
      int size = q.size();
      for (int i = 0; i < size; i++) {
      	TreeNode curNode = q.poll();
        TreeNode left = curNode.left;
        TreeNode right = curNode.right;
        if ((left != null && right != null) && ((left.key == a && right.key == b) || (left.key == b && right.key == a))) {
        	return false;
        }
        if (left != null) {
          count += left.key == a || left.key == b ? 1 : 0;
          q.offer(left);
        }
        if (right != null) {
          count += right.key == a || right.key == b ? 1 : 0;
          q.offer(right);
        }
      }
    	if (count == 1) return false;
      if (count == 2) return true;
    }
    return false;
  }