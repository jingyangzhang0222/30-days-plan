1. Sorted Array To Binary Search Tree
public class Solution {
  public TreeNode sortedArrayToBST(int[] num) {
    //corner case
    if (num == null || num.length == 0) {
    	return null;
    }
    return helper(num, 0, num.length - 1);
  }
  private TreeNode helper(int[] num, int left, int right) {
    //base case
    if (left > right) {
    	return null;
    }
  	int mid = left + (right - left) / 2;
    TreeNode curRoot = new TreeNode(num[mid]);
    curRoot.left = helper(num, left, mid - 1);
    curRoot.right = helper(num, mid + 1, right); 
    return curRoot;
  }
}
//Time: O(n), Space: O(logn)(call stack)

2. Shortest Distance from All Points
public class Solution {
  public int shortestDistance(int[][] grid) {
  	if (grid == null || grid.length == 0 || grid[0].length == 0) {
    	return -1;
   	}
    
    int[][] count = new int[grid.length][grid[0].length];
    boolean[][] visited = new boolean[grid.length][grid[0].length];
    int[][] dis = new int[grid.length][grid[0].length];
    int houseCount = 0;
    
  	for (int i = 0; i < grid.length; i++) {
    	for (int j = 0; j < grid[0].length; j++) {
      	if (grid[i][j] == 1) {
          houseCount++;
        	helper(grid, i, j, dis, count);
        }
      }
    }
    if (houseCount == 0) return -1;
    
    int globalMin = Integer.MAX_VALUE;
    for (int i = 0; i < grid.length; i++) {
    	for (int j = 0; j < grid[0].length; j++) {
      	if (count[i][j] == houseCount) {
        	globalMin = Math.min(globalMin, dis[i][j]);
        }
      }
    }
    return globalMin == Integer.MAX_VALUE ? -1 : globalMin;
  }
  private void helper(int[][] grid, int i, int j, int[][] dis, int[][] count) {
    Queue<Cell> q =new LinkedList<>();
    boolean[][] visited = new boolean[grid.length][grid[0].length];
    q.offer(new Cell(i, j, grid[i][j])); 
    int distance = 0;
    visited[i][j] = true;    
    while (!q.isEmpty()) {
      int size = q.size();
      for (int k = 0; k < size; k++) {
      	Cell curCell = q.poll();
      	int x = curCell .x;
      	int y = curCell.y;      
      	if (curCell.value == 0) {
      		dis[x][y] += distance;
        	count[x][y]++;
      	}
      	if (x + 1 < grid.length && !visited[x + 1][y] && grid[x + 1][y] != 1 && grid[x + 1][y] != 2) {
      		q.offer(new Cell(x + 1, y, grid[x + 1][y]));
        	visited[x + 1][y] = true;
      	}
      	if (y + 1 < grid[0].length && !visited[x][y + 1] && grid[x][y + 1] != 1 && grid[x][y + 1] != 2) {
      		q.offer(new Cell(x, y + 1, grid[x][y + 1]));
        	visited[x][y + 1] = true;
      	}
      	if (x > 0 && !visited[x - 1][y] && grid[x - 1][y] != 1 && grid[x - 1][y] != 2) {
      		q.offer(new Cell(x - 1, y, grid[x - 1][y]));
        	visited[x - 1][y] = true;
      	}
      	if (y > 0 && !visited[x][y - 1] && grid[x][y - 1] != 1 && grid[x][y - 1] != 2) {
      		q.offer(new Cell(x, y - 1, grid[x][y - 1]));
        	visited[x][y - 1] = true;
      	}
      }    	
      distance++;
    }
  }
  class Cell{
  	int x;
    int y;
    int value;
    public Cell(int x, int y, int value) {
    	this.x = x;
      this.y = y;
      this.value = value;
    }
  }
}
O(k * mn), O(mn)