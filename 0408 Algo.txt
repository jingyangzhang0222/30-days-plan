1. All Factors Of A Number
public class Solution {
  public List<List<Integer>> factors(int n) {
  	List<List<Integer>> sol = new ArrayList<>();
    helper(sol, new ArrayList<Integer>(), 2, n);
    return sol;
  }
  private void helper(List<List<Integer>> sol, List<Integer> subsol, int start, int quo) {
  	//termination condition
		if (quo == 1) {
			sol.add(new ArrayList<Integer>(subsol));
			return;
		}

		boolean needToBreak = false;
		for (int i = start; i <= quo; i++) {
			int curFactor = 0;
			if (i * i <= quo) {
				curFactor = i;
			} else {
				curFactor = quo;
				needToBreak = true;
			}
			if (quo % curFactor == 0) {
				subsol.add(curFactor);
				helper(sol, subsol, curFactor, quo / curFactor);
				subsol.remove(subsol.size() - 1);
			}
			if(needToBreak) break;
		}
	}
}

2. depth of a forest
public class Solution {
  public int depth(int[] forest) {
    int globalMax = 1;
    boolean containsLoop = false;
    for (int i = 0; i < forest.length; i++) {
    	int count = 1;
      int index = i;      
      while (forest[index] != -1) {
        if (index == i && count != 1) {
        	containsLoop = true;
          break;
        }
      	count++;
        index = forest[index];
      }
      if (containsLoop) break;
      globalMax = Math.max(globalMax, count);
    }
    return containsLoop ? -1 : globalMax;
  }
}

O(n^2), O(1)

3. keep distance for identical elements
public class Solution {
  public int[] keepDistance(int k) {
		int[] subsol = new int[2 * k];
    int[][] sol = new int[1][2 * k];
		helper(sol, subsol, 1);
		return sol[0][0] == 0 ? null : sol[0];    
  }
	private void helper(int[][] sol, int[] subsol, int index) {
		//base case
		if (index == subsol.length / 2 + 1) {
			sol[0] = Arrays.copyOf(subsol, subsol.length);
			return;
		}
		for (int i = 0; i + index + 1 < subsol.length; i++) {
			if (subsol[i] != 0 || subsol[i + index + 1] != 0) {
				continue;
			}
			subsol[i] = index;
			subsol[i + index + 1] = index;
			helper(sol, subsol, index + 1);
			subsol[i] = 0;
			subsol[i + index + 1] = 0;
		}
	}
}