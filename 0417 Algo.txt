1. Form Largest Number
public class Solution {
  public String largestNumber(String[] input) {
    Arrays.sort(input, new MyComparator());
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < input.length; i++) {
    	sb.append(input[i]);
    }
    return sb.toString();
  }
  
  static class MyComparator implements Comparator<String> {
  	@Override
        public int compare(String s1, String s2) {
    	if (s1.equals(s2)) {
      	  return 0;
        }
  	if (s1.length() > s2.length()) {
      	    return 0 - iter(s2, s1);
        } else {
      	    return iter(s1, s2);
        }
    }
    private int iter (String shorter, String longer) {
      int idxl = 0;
      int idxs = 0;
      while (idxl < longer.length()) {
      	if ((int)shorter.charAt(idxs) > (int)longer.charAt(idxl)) {
        	return -1;
        } else if ((int)shorter.charAt(idxs) < (int)longer.charAt(idxl)) {
        	return 1;
        }
        idxl++;
        idxs++;
        if (idxs == shorter.length()) idxs = 0;
      }
      return 0;
    }
  }  
}

2. Increasing Triplet Subsequence
class Solution {
    public boolean increasingTriplet(int[] nums) {
        if (nums == null || nums.length < 3) return false; 
        int first = nums[0]; int second = Integer.MAX_VALUE; 
        for (int num : nums) {
            if (num > second) return true; 
            else if (num > first) second = num; 
            else first = num;
        }
        return false;
    }
}
//O(n), O(1)